{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","state","action","status","query","defaultState","All","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","todosToDisplay","Active","completed","Completed","title","toLocaleLowerCase","includes","className","map","selectedTodo","id","classNames","onClick","currentTodoActions","TodoFilter","onSubmit","event","preventDefault","onChange","value","target","filterAction","val","trim","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","useState","user","setUser","loadUserFromServer","a","userId","useEffect","currentTodoAction","href","email","name","App","isLoad","setIsLoad","fetchTodos","fetchedTodos","todosAction","finally","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ab4f6b9d.chunk.js","sourcesContent":["export enum Status {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype FilterByStatus = {\n  type: 'filter/BY_STATUS',\n  payload: Status,\n};\n\ntype FilterByQuery = {\n  type: 'filter/BY_QUERY',\n  payload: string,\n};\n\nconst setStatus = (status: Status): FilterByStatus => ({\n  type: 'filter/BY_STATUS',\n  payload: status,\n});\n\nconst setQuery = (query: string): FilterByQuery => ({\n  type: 'filter/BY_QUERY',\n  payload: query,\n});\n\ntype Action = FilterByStatus | FilterByQuery;\n\nexport const actions = { setStatus, setQuery };\n\ntype State = {\n  query: string,\n  status: Status,\n};\n\nconst defaultState = {\n  query: '',\n  status: Status.All,\n};\n\nconst filterReducer = (\n  state: State = defaultState,\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'filter/BY_QUERY':\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    case 'filter/BY_STATUS':\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodoAction = {\n  type: 'todos/SET_TODOS',\n  payload: Todo[],\n};\n\ntype Action = SetTodoAction;\n\nconst setTodos = (todos: Todo[]): SetTodoAction => ({\n  type: 'todos/SET_TODOS',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\nconst todosReducer = (\n  state: Todo[] = [],\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET_TODOS':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { Status } from '../../types/Status';\nimport { Todo } from '../../types/Todo';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const filter = useAppSelector(state => state.filter);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const todosToDisplay: Todo[] = todos\n    .filter((todo) => {\n      switch (filter.status) {\n        case Status.All:\n          return todo;\n\n        case Status.Active:\n          return !todo.completed;\n\n        case Status.Completed:\n          return todo.completed;\n\n        default:\n          return todo;\n      }\n    })\n    .filter((todo) => {\n      const mathedTodod = todo.title.toLocaleLowerCase()\n        .includes(filter.query.toLocaleLowerCase());\n\n      return mathedTodod;\n    });\n\n  return (\n    <>\n      {/* <p className=\"notification is-warning\">\n        There are no todos matching current filter criteria\n      </p> */}\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {todosToDisplay.map((todo: Todo) => {\n            const selectedTodo = todo.id === currentTodo?.id;\n\n            return (\n              <tr data-cy=\"todo\" key={todo.id}>\n                <td className=\"is-vcentered\">{todo.id}</td>\n                <td className=\"is-vcentered\">\n                  {!todo.completed || (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n                </td>\n\n                <td className=\"is-vcentered is-expanded\">\n                  {/* <p className=\"has-text-danger\">{todo.title}</p> */}\n                  <p className={classNames(\n                    {\n                      'has-text-danger': !todo.completed,\n                      'has-text-success': todo.completed,\n                    },\n                  )}\n                  >\n                    {todo.title}\n                  </p>\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => {\n                      dispatch(currentTodoActions.setTodo(todo));\n                    }}\n                  >\n                    <span className=\"icon\">\n                      <i className={classNames('far', {\n                        'fa-eye': !selectedTodo,\n                        'fa-eye-slash': selectedTodo,\n                      })}\n                      />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\n// import { useAppSelector } from '../../app/hooks';\nimport { actions as filterAction } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useDispatch();\n  const query = useAppSelector(state => state.filter.query);\n\n  const handleSetQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const val = event.target.value;\n\n    dispatch(filterAction.setQuery(val.trim()));\n  };\n\n  const handleSetStatus = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target || '';\n\n    if (value === Status.Active\n      || value === Status.All\n      || value === Status.Completed) {\n      dispatch(filterAction.setStatus(value));\n    }\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handleSetStatus}\n          >\n            <option value={Status.All}>All</option>\n            <option value={Status.Active}>Active</option>\n            <option value={Status.Completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          value={query}\n          onChange={handleSetQuery}\n          placeholder=\"Search...\"\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query\n          && (\n            <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                onClick={() => dispatch(filterAction.setQuery(''))}\n              />\n            </span>\n          )}\n\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\nimport { actions as currentTodoAction } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const dispatch = useAppDispatch();\n\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const loadUserFromServer = async () => {\n    if (currentTodo) {\n      setUser(await getUser(currentTodo.userId));\n    }\n  };\n\n  useEffect(() => {\n    loadUserFromServer();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n      {!user && currentTodo\n        ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${currentTodo?.id}` }\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={() => dispatch(currentTodoAction.removeTodo())}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {currentTodo?.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {currentTodo?.completed\n                  ? <strong className=\"has-text-success\">Done</strong>\n                  : <strong className=\"has-text-danger\">Planned</strong>}\n                {' by '}\n                <a href={`mailto:${user?.email}`}>{user?.name}</a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { useDispatch } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { actions as todosAction } from './features/todos';\nimport { useAppSelector } from './app/hooks';\n\nexport const App: React.FC = () => {\n  const [isLoad, setIsLoad] = useState(false);\n  const dispatch = useDispatch();\n\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    setIsLoad(true);\n    const fetchTodos = async () => {\n      const fetchedTodos = await getTodos();\n\n      dispatch(todosAction.setTodos(fetchedTodos));\n    };\n\n    fetchTodos()\n      .finally(() => setIsLoad(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoad\n                ? <Loader />\n                : <TodoList />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal />}\n\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}